'''
Write a function so that the columns of the output matrix are powers of the input
vector. The order of the powers is determined by the increasing boolean argument. Specifically,
when increasing is False, the i-th output column is the input vector raised element-wise
to the power of N - i - 1.

HINT: Such a matrix with a geometric progression in each row is named for Alexandre-
Theophile Vandermonde.

'''

import numpy as np

def vander_Input(X,N,order):
    Y=X.size
    my_array=np.empty((N,Y),dtype=int)
    
    if order.upper()=="TRUE":
        for i in range(N):
            power_vector=np.array(np.power(X,i))
            my_array[i]=power_vector
    else:
        for i in range(N-1,-1,-1):
            power_vector=np.array(np.power(X,i))
            my_array[(N-1)-i]=power_vector
    return my_array

N=int(input('Enter the value of N power :'))

print('Enter list of elements eg. 1,2,3 :')
input_vector=input()
input_list=list(map(int,input_vector.split(',')))
X=np.array(input_list)
print('Input vector is :')
print(X)

order=input("Enter 'True' for increasing order of powers else enter 'False':")
my_array=vander_Input(X,N,order)
print('The resultant Vandermonde matrix is :')
print(my_array.T)
